communication avec Thomas:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>
commit 8juillet

j-ai cree une nouvelle structure pour les donnees qui restent constantes
,sauf une, durant toute l-execution. c'est la struct msvar qui contient:
-les données d'environnement au lancement de minishell
-les données d'environemment dans le minishell
-le path (directement derivé du envp mais comme ca c'est fait)
-un fd pour l'historique des commandes
-un fd pour l'historique des retours (pour la fonction echo $?) pas encore sure qu'il y en a besoin

j'ai fait une fonction ini_ms qui est lancée dès le debut dans minishell.c et initialise cette structure.

j'ai fait une fonction ft_exit_minishell pour quitter le minishell. c'est la seule qui doit avoir un exit (sauf des erreurs du minishell lui meme comme dans ini_ms). Si tu regardes mes fichiers pipex, tu verras encore des "exit" dans les gestions d'erreur mais il faut que je change tout ca. par exemple si l'utilisateur mets une fonction qui n'existe pas, il faut un message d'erreur mais pas quitter minishell... c'est la grande difference entre pipex et minishell,... enfin une...

Dans la structure des commandes j'ai rajouter les fd outfile et infile (en int et pas en char)
ansi qu'un previous pour pouvoir mieux naviger dans la liste.

j'ai fait aussi les fonctions pour effacer comme il faut la liste des commandes. (a faire à la fin de chaque execution)

je considère que le retour de readline est un char * en tout cas je me base la dessus pour analyser les commandes passée. 

il faut voir comment se gère la sortie sur le prompt. je pense que je vais les mettre dans un fd "sortie" et on verra comment on les affiche quand tu auras fini d'étudier comment se fait le prompt (si c'est pas encore fait :-)

ma prochaine etape remplir la liste des commandes. et je vais du coup essayer de lister tout les cas et de les envoyer sur des fonctions qu'on se partagera après. (par exemple la fonction check_bracket pour gerer les ' et ")
<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>
commit 14 juillet 
travaille essentiellement sur le parsing de la ligne de commande y compris les simples et doubles quotes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 